# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QQL2wO7h_bjMfX-D_riJu5NTnR6rIH2o
"""

class ProdutoAutomotivo:
    """
    Classe para representar produtos automotivos.
    """
    def __init__(self, codigo, descricao, marca, preco_unitario, quantidade_estoque):
        self.codigo = codigo  # Código único do produto
        self.descricao = descricao  # Descrição do produto
        self.marca = marca  # Marca do produto
        self.preco_unitario = preco_unitario  # Preço unitário do produto
        self.quantidade_estoque = quantidade_estoque  # Quantidade disponível em estoque

    def atualizar_estoque(self, quantidade):
        """
        Atualizar o estoque com base na entrada/saída de produtos.
        """
        self.quantidade_estoque += quantidade
        return f"Estoque atualizado com sucesso. Quantidade atual: {self.quantidade_estoque}"

    def calcular_valor_estoque(self):
        """
        Calcular o valor total dos produtos em estoque.
        """
        valor_total = self.quantidade_estoque * self.preco_unitario
        return f"Valor total em estoque: R${valor_total:.2f}"

    def exibir_detalhes_produtos(self):
        """
        Exibir os detalhes do produto.
        """
        return (f"Código: {self.codigo}\nDescrição: {self.descricao}\nMarca: {self.marca}\n"
                f"Preço Unitário: R${self.preco_unitario:.2f}\nEstoque: {self.quantidade_estoque}")


# Testando a Classe ProdutoAutomotivo no Console
if __name__ == "__main__":
    # Criando um produto
    produto = ProdutoAutomotivo(101, "Óleo Mineral 20W50", "Mobil", 27.99, 200)

    # Exibindo os detalhes do produto
    print("Detalhes do Produto:")
    print(produto.exibir_detalhes_produtos())

class ProdutoAutomotivo:
    """
    Classe para representar produtos automotivos.
    """
    def __init__(self, codigo, descricao, marca, preco_unitario, quantidade_estoque):
        self.codigo = codigo  # Código único do produto
        self.descricao = descricao  # Descrição do produto
        self.marca = marca  # Marca do produto
        self.preco_unitario = preco_unitario  # Preço unitário do produto
        self.quantidade_estoque = quantidade_estoque  # Quantidade disponível em estoque

    def atualizar_estoque(self, quantidade):
        """
        Atualiza o estoque com base na entrada/saída de produtos.
        """
        self.quantidade_estoque += quantidade
        return f"Estoque atualizado com sucesso. Quantidade atual: {self.quantidade_estoque}"

    def calcular_valor_estoque(self):
        """
        Calcula o valor total dos produtos em estoque.
        """
        valor_total = self.quantidade_estoque * self.preco_unitario
        return f"Valor total em estoque: R${valor_total:.2f}"

    def exibir_detalhes_produtos(self):
        """
        Exibe os detalhes do produto.
        """
        return (f"Código: {self.codigo}\nDescrição: {self.descricao}\nMarca: {self.marca}\n"
                f"Preço Unitário: R${self.preco_unitario:.2f}\nEstoque: {self.quantidade_estoque}")


# Testando a Classe ProdutoAutomotivo no Console
if __name__ == "__main__":
    # Criando um produto
    produto = ProdutoAutomotivo(101, "Óleo Mineral 20W50", "Mobil", 27.99, 200)

    # Exibindo os detalhes do produto
    print("Detalhes do Produto:")
    print(produto.exibir_detalhes_produtos())

    # Atualizando o estoque (saída de 30 unidades)
    print("\nAtualizando Estoque (saída de 30 unidades):")
    print(produto.atualizar_estoque(-30))

class ProdutoAutomotivo:
    """
    Classe para representar produtos automotivos.
    """
    def __init__(self, codigo, descricao, marca, preco_unitario, quantidade_estoque):
        self.codigo = codigo  # Código único do produto
        self.descricao = descricao  # Descrição do produto
        self.marca = marca  # Marca do produto
        self.preco_unitario = preco_unitario  # Preço unitário do produto
        self.quantidade_estoque = quantidade_estoque  # Quantidade disponível em estoque

    def atualizar_estoque(self, quantidade):
        """
        Atualiza o estoque com base na entrada/saída de produtos.
        """
        self.quantidade_estoque += quantidade
        return f"Estoque atualizado com sucesso. Quantidade atual: {self.quantidade_estoque}"

    def calcular_valor_estoque(self):
        """
        Calcula o valor total dos produtos em estoque.
        """
        valor_total = self.quantidade_estoque * self.preco_unitario
        return f"Valor total em estoque: R${valor_total:.2f}"

    def exibir_detalhes_produtos(self):
        """
        Exibe os detalhes do produto.
        """
        return (f"Código: {self.codigo}\nDescrição: {self.descricao}\nMarca: {self.marca}\n"
                f"Preço Unitário: R${self.preco_unitario:.2f}\nEstoque: {self.quantidade_estoque}")


# Testando a Classe ProdutoAutomotivo no Console
if __name__ == "__main__":
    # Criando um produto
    produto = ProdutoAutomotivo(101, "Óleo Mineral 20W50", "Mobil", 27.99, 200)

    # Exibindo os detalhes do produto
    print("Detalhes do Produto:")
    print(produto.exibir_detalhes_produtos())

    # Atualizando o estoque (saída de 30 unidades)
    print("\nAtualizando Estoque (saída de 30 unidades):")
    print(produto.atualizar_estoque(-30))

    # Atualizando o estoque (entrada de 50 unidades)
    print("\nAtualizando Estoque (entrada de 50 unidades):")
    print(produto.atualizar_estoque(50))

class ProdutoAutomotivo:
    """
    Classe para representar produtos automotivos.
    """
    def __init__(self, codigo, descricao, marca, preco_unitario, quantidade_estoque):
        self.codigo = codigo  # Código único do produto
        self.descricao = descricao  # Descrição do produto
        self.marca = marca  # Marca do produto
        self.preco_unitario = preco_unitario  # Preço unitário do produto
        self.quantidade_estoque = quantidade_estoque  # Quantidade disponível em estoque

    def atualizar_estoque(self, quantidade):
        """
        Atualiza o estoque com base na entrada/saída de produtos.
        """
        self.quantidade_estoque += quantidade
        return f"Estoque atualizado com sucesso. Quantidade atual: {self.quantidade_estoque}"

    def calcular_valor_estoque(self):
        """
        Calcula o valor total dos produtos em estoque.
        """
        valor_total = self.quantidade_estoque * self.preco_unitario
        return f"Valor total em estoque: R${valor_total:.2f}"

    def exibir_detalhes_produtos(self):
        """
        Exibe os detalhes do produto.
        """
        return (f"Código: {self.codigo}\nDescrição: {self.descricao}\nMarca: {self.marca}\n"
                f"Preço Unitário: R${self.preco_unitario:.2f}\nEstoque: {self.quantidade_estoque}")


# Testando a Classe ProdutoAutomotivo no Console
if __name__ == "__main__":
    # Criando um produto
    produto = ProdutoAutomotivo(101, "Óleo Mineral 20W50", "Mobil", 27.99, 200)

    # Exibindo os detalhes do produto
    print("Detalhes do Produto:")
    print(produto.exibir_detalhes_produtos())

    # Atualizando o estoque (saída de 30 unidades)
    print("\nAtualizando Estoque (saída de 30 unidades):")
    print(produto.atualizar_estoque(-30))

    # Atualizando o estoque (entrada de 50 unidades)
    print("\nAtualizando Estoque (entrada de 50 unidades):")
    print(produto.atualizar_estoque(50))

     # Calculando o valor total do estoque
    print("\nCalculando o Valor Total do Estoque:")
    print(produto.calcular_valor_estoque())

# Testando a Classe ProdutoAutomotivo no Console
if __name__ == "__main__":
    # Criando um produto
    produto = ProdutoAutomotivo(101, "Óleo Mineral 20W50", "Mobil", 27.99, 200)

    # Exibindo os detalhes do produto
    print("Detalhes do Produto:")
    print(produto.exibir_detalhes_produtos())

    # Atualizando o estoque (saída de 30 unidades)
    print("\nAtualizando Estoque (saída de 30 unidades):")
    print(produto.atualizar_estoque(-30))

    # Atualizando o estoque (entrada de 50 unidades)
    print("\nAtualizando Estoque (entrada de 50 unidades):")
    print(produto.atualizar_estoque(50))

    # Calculando o valor total do estoque
    print("\nCalculando o Valor Total do Estoque:")
    print(produto.calcular_valor_estoque())

class Cliente:
    """
    Classe para representar um cliente.
    """
    def __init__(self, nome, cpf, telefone, endereco):
        self.nome = nome  # Nome do cliente
        self.cpf = cpf  # CPF do cliente
        self.telefone = telefone  # Telefone de contato
        self.endereco = endereco  # Endereço do cliente
        self.historico_compras = []  # Histórico de compras do cliente

    def registrar_compra(self, produto, quantidade, valor_total):
        """
        Registrar uma compra no histórico do cliente.
        """
        compra = {
            "produto": produto,
            "quantidade": quantidade,
            "valor_total": valor_total
        }
        self.historico_compras.append(compra)
        return f"Compra registrada: {produto} (x{quantidade}) - Total: R${valor_total:.2f}"

    def exibir_historico_compras(self):
        """
        Exibir o histórico de compras do cliente.
        """
        if not self.historico_compras:
            return "O cliente não possui compras registradas."

        historico = "Histórico de Compras:\n"
        for i, compra in enumerate(self.historico_compras, start=1):
            historico += (f"{i}. Produto: {compra['produto']}, Quantidade: {compra['quantidade']}, "
                          f"Valor Total: R${compra['valor_total']:.2f}\n")
        return historico.strip()

    def exibir_informacoes(self):
        """
        Exibir as informações do cliente.
        """
        return (f"Nome: {self.nome}\nCPF: {self.cpf}\nTelefone: {self.telefone}\n"
                f"Endereço: {self.endereco}")

# Testando a Classe Cliente no Console
if __name__ == "__main__":
    # Criando um cliente
    cliente = Cliente("Ronny Wallace RU: 4228692", "123.456.789-10", "19-99579-7614", "Rua Zero, 123")

    # Exibindo informações do cliente
    print("Informações do Cliente:")
    print(cliente.exibir_informacoes())

# Testando a Classe Cliente no Console
if __name__ == "__main__":
    # Criando um cliente
    cliente = Cliente("Ronny Wallace RU: 4228692", "123.456.789-10", "19-99579-7614", "Rua Zero, 123")

    # Exibindo informações do cliente
    print("Informações do Cliente:")
    print(cliente.exibir_informacoes())

    # Registrando compras
    print("\nRegistrando Compras:")
    print(cliente.registrar_compra("Óleo Mineral 20W50", 2, 55.98))
    print(cliente.registrar_compra("Filtro de Óleo", 1, 30.00))

    # Exibindo histórico de compras
    print("\nExibindo Histórico de Compras:")
    print(cliente.exibir_historico_compras())

class ProdutoAutomotivo:
    """
    Classe para representar produtos automotivos.
    """
    def __init__(self, codigo, descricao, marca, preco_unitario, quantidade_estoque):
        self.codigo = codigo  # Código único do produto
        self.descricao = descricao  # Descrição do produto
        self.marca = marca  # Marca do produto
        self.preco_unitario = preco_unitario  # Preço unitário do produto
        self.quantidade_estoque = quantidade_estoque  # Quantidade disponível em estoque

    def atualizar_estoque(self, quantidade):
        """
        Atualiza o estoque com base na entrada/saída de produtos.
        """
        self.quantidade_estoque += quantidade
        return f"Estoque atualizado com sucesso. Quantidade atual: {self.quantidade_estoque}"

    def calcular_valor_estoque(self):
        """
        Calcula o valor total dos produtos em estoque.
        """
        valor_total = self.quantidade_estoque * self.preco_unitario
        return f"Valor total em estoque: R${valor_total:.2f}"

    def exibir_detalhes_produtos(self):
        """
        Exibe os detalhes do produto.
        """
        return (f"Código: {self.codigo}\nDescrição: {self.descricao}\nMarca: {self.marca}\n"
                f"Preço Unitário: R${self.preco_unitario:.2f}\nEstoque: {self.quantidade_estoque}")
class Cliente:
    """
    Classe para representar um cliente.
    """
    def __init__(self, nome, cpf, telefone, endereco):
        self.nome = nome  # Nome do cliente
        self.cpf = cpf  # CPF do cliente
        self.telefone = telefone  # Telefone de contato
        self.endereco = endereco  # Endereço do cliente
        self.historico_compras = []  # Histórico de compras do cliente

    def registrar_compra(self, produto, quantidade, valor_total):
        """
        Registrar uma compra no histórico do cliente.
        """
        compra = {
            "produto": produto,
            "quantidade": quantidade,
            "valor_total": valor_total
        }
        self.historico_compras.append(compra)
        return f"Compra registrada: {produto} (x{quantidade}) - Total: R${valor_total:.2f}"

    def exibir_historico_compras(self):
        """
        Exibir o histórico de compras do cliente.
        """
        if not self.historico_compras:
            return "O cliente não possui compras registradas."

        historico = "Histórico de Compras:\n"
        for i, compra in enumerate(self.historico_compras, start=1):
            historico += (f"{i}. Produto: {compra['produto']}, Quantidade: {compra['quantidade']}, "
                          f"Valor Total: R${compra['valor_total']:.2f}\n")
        return historico.strip()

    def exibir_informacoes(self):
        """
        Exibir as informações do cliente.
        """
        return (f"Nome: {self.nome}\nCPF: {self.cpf}\nTelefone: {self.telefone}\n"
                f"Endereço: {self.endereco}")

# Testando a Classe ProdutoAutomotivo no Console
if __name__ == "__main__":
    # Criando um produto
    produto = ProdutoAutomotivo(101, "Óleo Mineral 20W50", "Mobil", 27.99, 200)

    # Exibindo os detalhes do produto
    print("Detalhes do Produto:")
    print(produto.exibir_detalhes_produtos())

    # Atualizando o estoque (saída de 30 unidades)
    print("\nAtualizando Estoque (saída de 30 unidades):")
    print(produto.atualizar_estoque(-30))

    # Atualizando o estoque (entrada de 50 unidades)
    print("\nAtualizando Estoque (entrada de 50 unidades):")
    print(produto.atualizar_estoque(50))

    # Calculando o valor total do estoque
    print("\nCalculando o Valor Total do Estoque:")
    print(produto.calcular_valor_estoque())

# Testando a Classe Cliente no Console
if __name__ == "__main__":
    # Criando um cliente
    cliente = Cliente("Ronny Wallace RU: 4228692", "123.456.789-10", "19-99579-7614", "Rua Zero, 123")

    # Exibindo informações do cliente
    print("Informações do Cliente:")
    print(cliente.exibir_informacoes())

    # Registrando compras
    print("\nRegistrando Compras:")
    print(cliente.registrar_compra("Óleo Mineral 20W50", 2, 55.98))
    print(cliente.registrar_compra("Filtro de Óleo", 1, 30.00))

    # Exibindo histórico de compras
    print("\nExibindo Histórico de Compras:")
    print(cliente.exibir_historico_compras())